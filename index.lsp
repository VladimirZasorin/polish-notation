(defun from-string-to-list (str)
    (let ((L (read-from-string 
        (concatenate 'string "(" str ")"))))
    L))
    
(defun element-numb (n w)
    (when w (if (> n 1) (element-numb (1- n) (cdr w)) (car w))))
    
(defun del-by-num (n lst)
    (cond ((null lst) nil)
        ((zerop n) (cdr lst))
        (t (cons (car lst) (del-by-num (1- n) (cdr lst))))))
        
(defun plus (x y) (+ x y))
(defun minus (x y) (- x y))
(defun division (x y) (/ x y))
(defun multiplication (x y) (* x y))
    
(defvar my_expr '())
(format T "Введите выражение в обратной польской нотации!~%")
(setf my_expr (read-line))
(format T "Введённое выражение: ")
(format T my_expr)
(setf my_expr (from-string-to-list my_expr))

(defvar opetator +)
(defvar result 0)
(defvar n 1)
(loop
    (when (> n (length my_expr)) (return))
        (if (eq (numberp (element-numb n my_expr)) Nil)
            (if (= n 2)
                (progn
                    (setf operator (element-numb 2 my_expr))
                    (setf f 0)
                    (setf s (element-numb 1 my_expr))
                    (if (eq operator '+) (setf subvalue (plus f s)))
                    (if (eq operator '-) (setf subvalue (minus f s)))
                    (setf (nth 1 my_expr) subvalue)
                    (pop my_expr)
                    (setf n 1)
                    (print my_expr)
                )
                (progn
                    (setf operator (element-numb n my_expr))
                    (setf f (element-numb (eval (- n 2)) my_expr))
                    (setf s (element-numb (eval (- n 1)) my_expr))
                    (if (eq operator '+)
                        (setf subvalue (plus f s))
                        (if (eq operator '-)
                            (setf subvalue (minus f s))
                            (if (eq operator '/)
                                (setf subvalue (division f s))
                                (setf subvalue (multiplication f s)))))
                    (setf (nth (eval (- n 1)) my_expr) subvalue)
                    (setf my_expr (del-by-num (eval (- n 2)) my_expr))
                    (setf my_expr (del-by-num (eval (- n 3)) my_expr))
                    (setf n 1)
                    (print my_expr)
                )
            )
        )
        (incf n))

(format T "~%Ответ: ")
(print (element-numb 0 my_expr))